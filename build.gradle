plugins {
    id "java"
    id "jigsaw"
    id 'maven-publish'
    id 'com.gradleup.shadow'
}

//if (version == null) {
    version = fallback_version
//}

loom {
    splitEnvironmentSourceSets()
    mods {
        "cosmic-api" { //TODO: Fix
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
    accessWidenerPath = file("src/main/resources/cosmic-api.manipulator")
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java"
            srcDirs "api/src/main/java"
        }
        resources {
            srcDirs "src/main/resources"
            srcDirs "api/src/main/resources"
        }
    }
    client {
        java {
            srcDirs "src/main/java"
        }
    }
	//client {
	//    java {
    //        srcDirs "src/client/java"
    //        srcDirs "api/src/client/java"
    //    }
    //    resources {
    //        srcDirs "src/client/resources"
    //        srcDirs "api/src/client/resources"
    //    }
	//}

}
repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

jar {
    duplicatesStrategy = 'EXCLUDE'
}

dependencies {
    // required for jitpack for some reason
    mappingsConstants("org.parchmentmc.data:parchment-1.20.2:2023.10.08@zip")
    cosmicReach("finalforeach:cosmicreach:${cosmic_reach_version}")
}

processResources() {
    duplicatesStrategy = 'EXCLUDE'
}

processResources {
    // Locations of where to inject the properties
    def resourceTargets = [ "puzzle.mod.json" ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "mod_version"     : version,
            "mod_desc"       :  desc,
            "version"       :  project.version.toString().split("-")[0],
//            "cr_version"          : cosmic_reach_version,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = p_group
            artifactId = p_id
            version = this.version

            artifact source: jar, extension: 'jar'
        }
    }
}